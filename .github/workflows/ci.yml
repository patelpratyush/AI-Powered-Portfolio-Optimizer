name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.12
  NODE_VERSION: 18

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create environment file
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "REDIS_URL=redis://localhost:6379/1" >> .env
        echo "FLASK_ENV=testing" >> .env
    
    - name: Run tests
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linter
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type check
      working-directory: ./frontend
      run: npx tsc --noEmit
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      if: false  # Skip for now until tests are implemented
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r backend/ -f json -o bandit-report.json"
        
    - name: Upload Bandit scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: bandit-report.json

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Run Black
      working-directory: ./backend
      run: black --check --diff .
      continue-on-error: true
    
    - name: Run isort
      working-directory: ./backend
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: Run Flake8
      working-directory: ./backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        python app.py &
        sleep 10  # Wait for server to start
    
    - name: Run integration tests
      run: |
        curl -f http://localhost:5000/health || exit 1
        echo "Health check passed"

  deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deployment would happen here"
        echo "Consider using services like:"
        echo "- Heroku"
        echo "- AWS ECS/Lambda"
        echo "- Google Cloud Run"
        echo "- DigitalOcean App Platform"

  performance-test:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Performance baseline test
      run: |
        echo "Performance testing placeholder"
        echo "Consider tools like:"
        echo "- Artillery.js for API load testing"
        echo "- Lighthouse CI for frontend performance"
        echo "- Custom scripts for ML model performance"